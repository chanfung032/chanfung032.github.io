Day 9: tc-bpf
========================

第一个 tc-bpf 程序
---------------------

程序：

.. code-block:: c

    #include <linux/bpf.h>

    #define SEC(x)  __attribute__((section(x), used))

    SEC("mycls") 
    int cls_main(struct __sk_buff *skb)
    {
        return 2; // TC_ACT_SHOT
    }

    char __license[] __section("license") = "GPL";

- ``TC_ACT_*`` 宏定义：https://github.com/torvalds/linux/blob/v5.9/tools/include/uapi/linux/pkt_cls.h#L32
- ``__sk_buff`` 结构体定义：https://github.com/torvalds/linux/blob/v5.9/tools/include/uapi/linux/bpf.h#L3718

保存代码为文件 ``foo.c``，然后编译：

.. code-block:: console

    # clang -O2 -target bpf -c foo.c -o foo.o

加载运行/查看/删除：

.. code-block:: console

    # tc qdisc add dev eth1 clsact
    # tc qdisc show dev eth1
    qdisc fq_codel 0: root refcnt 2 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn
    qdisc clsact ffff: parent ffff:fff1

    # tc filter add dev eth1 ingress bpf da obj foo.o sec mycls
    # tc filter add dev eth1 egress  bpf da obj foo.o sec mycls

    # tc filter show dev eth1 ingress
    filter protocol all pref 49152 bpf chain 0
    filter protocol all pref 49152 bpf chain 0 handle 0x1 foo.o:[mycls] direct-action not_in_hw id 17 tag 3b185187f1855c4c jited
    # tc filter show dev eth1 egress
    filter protocol all pref 49152 bpf chain 0
    filter protocol all pref 49152 bpf chain 0 handle 0x1 foo.o:[mycls] direct-action not_in_hw id 18 tag 3b185187f1855c4c jited

    # tc filter del dev eth1 ingress pref 49152
    # tc filter del dev eth1 egress  pref 49152

上面的程序运行后会 drop 所有的包。

参考：

- https://lwn.net/Articles/671458/
- https://man7.org/linux/man-pages/man8/tc-bpf.8.html
- https://archive.fosdem.org/2016/schedule/event/ebpf/attachments/slides/1159/export/events/attachments/ebpf/slides/1159/ebpf.pdf

tc 在网络栈中的位置
--------------------

.. image:: images/tc-overview.png

tc 程序的执行点位于系统网络栈的最底层，在 NIC Driver 之后，最关键的是在 tcpdump 之后，所以 tcpdump 又可以使用了 ✌️。

完整的图参见：https://commons.wikimedia.org/wiki/File:Netfilter-packet-flow.svg

